#!/hive/sbin/bash
##!/usr/bin/env ash
export PATH=$PATH:/hive/bin:/hive/sbin
export LD_LIBRARY_PATH=/hive/lib

# Sends hello to Hive, receives config files, restarts miner

HELLO_OK="/tmp/.hive-hello-ok"
[ -f $HELLO_OK ] && rm $HELLO_OK

RIG_CONF="/hive-config/rig.conf"
WALLET_CONF="/hive-config/wallet.conf"
VPN_INSTALLED="/tmp/.openvpn-installed"
mkdir -p "/hive-config"

[ -t 1 ] && . colors
[ ! -f $RIG_CONF ] && echo -e "No config $RIG_CONF" && exit 1

. $RIG_CONF
. asic-model

[[ -z $FARM_HASH && -z $RIG_ID ]] && echo "Please use FARM_HASH or RIG_ID in config" && exit 1
[[ ! -z $RIG_ID  && -z $RIG_PASSWD ]] && echo "No RIG_PASSWD in config" && exit 1
[[ -z $HIVE_HOST_URL ]] && echo "No HIVE_HOST_URL in config" && exit 1



HIVE_URL="$HIVE_HOST_URL/worker/api"


#will need to restart miner after
arg_restartminer=0
#send boot flag with hello message
arg_boot=0
arg_hostname=

#check for arguments
for var in "$@"; do
    [[ $var == "restartminer" ]] && arg_restartminer=1
    [[ $var == "boot" ]] && arg_boot=1
    [[ $var == "hostname" ]] && arg_hostname=`hostname`
done

# Make hello request ================================================================

boot_time=$(( `date +%s` - `cat /proc/uptime | awk '{printf "%d", $1}'` ))

ips_json="[\""`ifconfig eth0 | grep 'inet addr:' | cut -d: -f2 | awk '{ print $1}'`"\"]"
net_interfaces=`ip -o link | grep -vE 'LOOPBACK|POINTOPOINT' | awk '{  printf "{\"iface\": \"%s\", \"mac\": \"%s\"}\n", substr($2, 1, length($2)-1), $(NF-2)  }' | jq -sc .`

mb_manufacturer=
#mb_product=`cat /etc/config/Config.ini | grep -m1 "Name=" | awk -F"=" '{print $2}'`
[ -e "/usr/bin/compile_time" ] && mb_product=`sed -n 2p /usr/bin/compile_time`
[ -e "/opt/system/bank.conf" ] && mb_product="ebit"
[ -e "/etc/hwrevision" ] && mb_product=`cut -d\  -f 2 /etc/hwrevision`
[ -e "/var/www/html/src/Template/Layout/signin.twig" ] && mb_product=`cat /var/www/html/src/Template/Layout/signin.twig | grep title | sed 's/<[^>]*>//g' | sed s/\ *//`
[ -e "/tmp/type" ] && [ ! -e "/etc/hwrevision" ] && mb_product=`cat /tmp/type`.`cat /tmp/hwver`


cpu_model=`cat /proc/cpuinfo | grep -m1 "^model name" | sed 's/model name[ :\t]*//g'`
#cpu_hardware=`cat /proc/cpuinfo | grep -m1 "^Hardware" | sed 's/Hardware[ :\t]*//g'`
#[[ ! -z "$cpu_hardware" ]] && cpu_model="$cpu_model ($cpu_hardware)"
cpu_cores=`cat /proc/cpuinfo | grep "^model name" | wc -l`
aes=`cat /proc/cpuinfo | grep "^Features .*aes" | wc -l`

kernel=`uname --kernel-release`

hive_version=`cat /hive/etc/VERSION`
#hive_version=`dpkg -s hive | grep '^Version: ' | sed 's/Version: //'`

[ -e "/usr/bin/compile_time" ] && asic=`cat /usr/bin/compile_time | jq -R . | jq -s '{"firmware": .[0], "model": .[1], "logic_version": .[2]}'`
[ -e "/usr/bin/compile_ver" ] && asic=`cat /usr/bin/compile_ver | jq -R . | jq -s '{"firmware": .[0], "model": .[1], "logic_version": .[2]}'`
[[ $mb_product =~ "Antminer D3 Blissz" ]] && asic=`cat /usr/bin/compile_time | jq -R . | jq -s '{"firmware": .[0], "model": .[1], "logic_version": "unknown"}'`
[[ $mb_product == "b29+.g19" ]] && asic=`cat /etc/hwrevision | jq -R . | jq -s '{"firmware": .[1], "model": "Innosilicon A9", "logic_version": .[0]}'`
[[ $mb_product == "1337.PWNED" ]] && asic=`cat /etc/hwrevision | jq -R . | jq -s '{"firmware": .[1], "model": "Innosilicon A9 PWNED", "logic_version": .[0]}'`
[[ $mb_product == "d9.g19" ]] && asic=`cat /etc/hwrevision | jq -R . | jq -s '{"firmware": .[1], "model": "Innosilicon D9", "logic_version": .[0]}'`
[[ $mb_product == "s11.g19" ]] && asic=`cat /etc/hwrevision | jq -R . | jq -s '{"firmware": .[1], "model": "Innosilicon S11", "logic_version": .[0]}'`
[[ $mb_product == "t3.soc" ]] && asic=`cat /etc/hwrevision | jq -R . | jq -s '{"firmware": .[1], "model": "Innosilicon T3", "logic_version": .[0]}'`
[[ $mb_product == "t2thm.soc" ]] && asic=`cat /etc/hwrevision | jq -R . | jq -s '{"firmware": .[1], "model": "Innosilicon T2Thm", "logic_version": .[0]}'`
[[ $mb_product == "t2thf.soc" ]] && asic=`cat /etc/hwrevision | jq -R . | jq -s '{"firmware": .[1], "model": "Innosilicon T2Th", "logic_version": .[0]}'`
[[ $mb_product == "t2th.soc" ]] && asic=`cat /etc/hwrevision | jq -R . | jq -s '{"firmware": .[1], "model": "Innosilicon T2Thf", "logic_version": .[0]}'`
[[ $mb_product == "t2tz.soc" ]] && asic=`cat /etc/hwrevision | jq -R . | jq -s '{"firmware": .[1], "model": "Innosilicon T2Tz-30T", "logic_version": .[0]}'`
[[ $mb_product == "t2th+.soc" ]] && asic=`cat /etc/hwrevision | jq -R . | jq -s '{"firmware": .[1], "model": "Innosilicon T2TH+", "logic_version": .[0]}'`
[[ $mb_product == "t2t.soc" ]] && asic=`cat /etc/hwrevision | jq -R . | jq -s '{"firmware": .[1], "model": "Innosilicon T2T-24T", "logic_version": .[0]}'`
[[ $mb_product == "t2thf.soc" ]] && asic=`cat /etc/hwrevision | jq -R . | jq -s '{"firmware": .[1], "model": "Innosilicon T2THf+", "logic_version": .[0]}'`
[[ $mb_product == "t2t+.soc" ]] && asic=`cat /etc/hwrevision | jq -R . | jq -s '{"firmware": .[1], "model": "Innosilicon T2T+(32T)", "logic_version": .[0]}'`
[[ $mb_product == "t2thl+.soc" ]] && asic=`cat /etc/hwrevision | jq -R . | jq -s '{"firmware": .[1], "model": "Innosilicon T2THl+", "logic_version": .[0]}'`
[[ $mb_product == "t2ts.soc" ]] && asic=`cat /etc/hwrevision | jq -R . | jq -s '{"firmware": .[1], "model": "Innosilicon T2Ts-26T", "logic_version": .[0]}'`
[[ $mb_product == "t2ti.soc" ]] && asic=`cat /etc/hwrevision | jq -R . | jq -s '{"firmware": .[1], "model": "Innosilicon T2Ti-25T", "logic_version": .[0]}'`
[[ $mb_product == "t3h+.soc" ]] && asic=`cat /etc/hwrevision | jq -R . | jq -s '{"firmware": .[1], "model": "Innosilicon T3H+", "logic_version": .[0]}'`
[[ $mb_product == "Zig Z1+" ]] && asic=`cat /var/www/html/VERSION | jq -R . | jq -s '{"firmware": .[0], "model": "Zig Z1+", "logic_version": "Zig Z1+"}'`
[[ $mb_product == "Zig Z1" ]] && asic=`cat /var/www/html/VERSION | jq -R . | jq -s '{"firmware": .[0], "model": "Zig Z1", "logic_version": "Zig Z1"}'`
[[ $mb_product == "T4.G19" ]] && asic=`cat /tmp/type| jq -R . | jq -s '{"firmware": .[0], "model": "Innosilicon A5/A8", "logic_version": .[0]}'`

#asic=`cat /usr/bin/compile_time | jq -R . | jq -s '{"firmware": .[0], "model": .[1], "logic_version": "unknown"}'`
#asic=`cat /usr/bin/compile_time | jq -R . | jq -s '{"firmware": .[0], "model": .[1]}'`

#asic_chain_count=`echo /dev/fd/*/ | sed s/[^0-9]//g`
asic_chain_count=`ls -lLtr /dev/fd/ | grep rw | wc -l`
[[ $mb_product =~ "Zig Z1" ]] && asic_chain_count=4


uid=$(echo ${mb_product}-$(cat /sys/class/net/eth0/address | sed 's/://g') | tr '[:upper:]' '[:lower:]')
if which sha1sum > /dev/null; then
	uid=$(echo $uid | sha1sum | awk '{print $1}')
elif which md5sum > /dev/null; then
	uid=$(echo $uid | md5sum | awk '{print $1}')
fi

if [ ! -z $FANS_COUNT_DEFAULT ]; then
	fans_count=$FANS_COUNT_DEFAULT
else
	fans_count=2
fi

request=$(
jq -n \
--arg uid "$uid" \
--arg rig_id "$RIG_ID" \
--arg passwd "$RIG_PASSWD" \
--arg farm_hash "$FARM_HASH" \
--arg boot_time "$boot_time" \
--arg boot_event "$arg_boot" \
--argjson ip "$ips_json" \
--argjson net_interfaces "$net_interfaces" \
--arg model "$cpu_model" --arg cores "$cpu_cores" --arg aes "$aes" \
--arg manufacturer "$mb_manufacturer" --arg product "$mb_product" \
--argjson asic "$asic" \
--arg asic_chain_count "$asic_chain_count" \
--arg kernel "$kernel" \
--arg version "$hive_version" \
--arg fans_count "$fans_count" \
'{
	"method": "hello", "jsonrpc": "2.0", "id": 0,
	"params": {
		$rig_id, $passwd, $farm_hash, $uid,
		$boot_time, $boot_event, $ip, $net_interfaces,
		"mb": {$manufacturer, $product},
		"cpu": {$model, $cores, $aes},
		$asic, $asic_chain_count,
		$kernel, $version, $fans_count
	}
}'
)

if [ -e /config/HIVE_WORKER_NAME ]; then
	arg_hostname=$(cat /config/HIVE_WORKER_NAME)
	rm /config/HIVE_WORKER_NAME
fi

if [[ ! -z $arg_hostname ]]; then
	request=`echo "$request" | jq --arg worker_name "$arg_hostname" '. * {"params": {$worker_name}}'`
fi

echo "$request" | jq -c '.'

response=$(echo $request | curl --insecure -L --data @- --connect-timeout 15 --max-time 25 --silent -XPOST "${HIVE_URL}?id_rig=$RIG_ID&method=hello" -H "Content-Type: application/json")
exitcode=$?
[[ $exitcode -ne 0 ]] &&
	echo -e "${RED}Error connecting to Hive server${NOCOLOR} $HIVE_HOST_URL" &&
	human-curl-error $exitcode &&
	exit $exitcode #404 is not a bad exit code

#output and check json
echo "$response" | jq '.'

[ $? -ne 0 ] && echo -e "${RED}Error parsing JSON response:${NOCOLOR} $response" && exit $? #error json parsing

error=$(echo $response | jq '.error' --raw-output)
[[ ! -z "$error" && "$error" != "null" ]] && echo -e "${RED}ERROR:${NOCOLOR} `echo $response | jq '.error.message' -r`" && exit 1





# Save config and check it ================================================================
config=$(echo $response | jq '.result.config' --raw-output)
[[ -z "$config" || "$config" == "null" ]] &&
	echo "Response body: $response" &&
	echo -e "${RED}ERROR:${NOCOLOR} no config field in response" &&
	exit 1
echo "$config" > $RIG_CONF
. $RIG_CONF
#hostname-check

[[ ! -z $TIMEZONE ]] && export TZ=$TIMEZONE


# Timezone ================================================================
#[[ ! -z $TIMEZONE ]] &&
#	timedatectl set-timezone "$TIMEZONE"


# Wallet config ================================================================
wallet=$(echo $response | jq '.result.wallet' --raw-output)
if [[ ! -z "$wallet" && "$wallet" != "null" ]]; then
	echo "$wallet" > $WALLET_CONF
fi


# Post actions =================================================================
#restartminer - restart miner on success
if [[ $arg_restartminer == 1 ]]; then
	/hive/bin/miner restart
#	[[ $WD_ENABLED == 1 ]] &&
#		wd restart
fi

echo "Touching $HELLO_OK"
touch $HELLO_OK


#Flush buffers if any files changed
sync

exit 0
